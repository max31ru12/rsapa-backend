name: CI

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: pip

      - name: Install Poetry
        run: |
          python3 -m pip install --upgrade pip pipx
          pipx ensurepath
          pipx install poetry
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          poetry --version

      - name: Install deps
        run: poetry install --with dev

      - name: Lint (ruff)
        run: poetry run ruff check .

  migrations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Write .env
        shell: bash
        run: |
          cat > .env <<'EOF'
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          FERNET_KEY=${{ secrets.FERNET_KEY }}
          ALGORITHM=${{ secrets.ALGORITHM }}

          STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}
          STRIPE_EVENTS=checkout.session.completed,payment_intent.succeeded,invoice.payment_succeeded,invoice.payment_failed,payment_intent.payment_failed,customer.subscription.updated,customer.subscription.deleted,invoice.paid
          STRIPE_WEBHOOK_SECRET_KEY=${{ secrets.STRIPE_WEBHOOK_SECRET_KEY }}
          STRIPE_PRICE_ID_TEST=${{ secrets.STRIPE_PRICE_ID_TEST }}

          BACKEND_DOMAIN=rsapa_backend
          BACKEND_PORT=8000

          FRONTEND_DOMAIN=localhost:3000

          GMAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          GMAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          GMAIL_FROM=${{ secrets.MAIL_FROM }}
          GMAIL_PORT=${{ secrets.MAIL_PORT }}
          GMAIL_SERVER=${{ secrets.MAIL_SERVER }}

          DB_PORT=5432
          DB_PASSWORD=test
          DB_USER=test
          DB_NAME=test
          DB_HOST=localhost
          EOF

          echo ".env written (secrets hidden)"

      - name: Start DB (+stripe-listen) with docker compose
        run: |
          docker compose -f local.yml up -d rsapa_database stripe-listen
          docker compose -f local.yml ps
          docker compose -f local.yml logs --no-color --tail=50 rsapa_database || true

      - name: Wait for Postgres
        shell: bash
        run: |
          for i in {1..12}; do
            if docker compose -f local.yml exec -T rsapa_database pg_isready -U test; then
              echo "PostgreSQL is ready"; exit 0
            fi
            echo "Waiting for PostgreSQL... ($i/12)"
            sleep 5
          done
          echo "PostgreSQL failed to start"
          docker compose -f local.yml logs rsapa_database || true
          exit 1

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: pip

      - name: Install Poetry & deps
        run: |
          python3 -m pip install --upgrade pip pipx
          pipx ensurepath
          pipx install poetry
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          poetry install --with dev

      - name: Run Alembic migrations
        run: poetry run alembic upgrade head

  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Write .env
        shell: bash
        run: |
          cat > .env <<'EOF'
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          FERNET_KEY=${{ secrets.FERNET_KEY }}
          ALGORITHM=${{ secrets.ALGORITHM }}

          STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}
          STRIPE_EVENTS=checkout.session.completed,payment_intent.succeeded,invoice.payment_succeeded,invoice.payment_failed,payment_intent.payment_failed,customer.subscription.updated,customer.subscription.deleted,invoice.paid
          STRIPE_WEBHOOK_SECRET_KEY=${{ secrets.STRIPE_WEBHOOK_SECRET_KEY }}
          STRIPE_PRICE_ID_TEST=${{ secrets.STRIPE_PRICE_ID_TEST }}

          BACKEND_DOMAIN=rsapa_backend
          BACKEND_PORT=8000

          FRONTEND_DOMAIN=localhost:3000

          GMAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          GMAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          GMAIL_FROM=${{ secrets.MAIL_FROM }}
          GMAIL_PORT=${{ secrets.MAIL_PORT }}
          GMAIL_SERVER=${{ secrets.MAIL_SERVER }}

          DB_PORT=5432
          DB_PASSWORD=test
          DB_USER=test
          DB_NAME=test
          DB_HOST=localhost
          EOF

      - name: Start DB with docker compose
        run: |
          docker compose -f local.yml up -d rsapa_database
          docker compose -f local.yml ps
          docker compose -f local.yml logs --no-color --tail=50 rsapa_database || true

      - name: Wait for Postgres
        shell: bash
        run: |
          for i in {1..12}; do
            if docker compose -f local.yml exec -T rsapa_database pg_isready -U test; then
              echo "PostgreSQL is ready"; exit 0
            fi
            echo "Waiting for PostgreSQL... ($i/12)"
            sleep 5
          done
          echo "PostgreSQL failed to start"
          docker compose -f local.yml logs rsapa_database || true
          exit 1

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: pip

      - name: Install Poetry & deps
        run: |
          python3 -m pip install --upgrade pip pipx
          pipx ensurepath
          pipx install poetry
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          poetry install --with dev
          mkdir -p media

      - name: Ensure schema up
        run: poetry run alembic upgrade head

      - name: Run tests
        run: poetry run pytest

  deploy:
    runs-on: ubuntu-latest
    # deploy —Å—Ç–∞—Ä—Ç—É–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ migrations –∏ tests –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
    needs: [ prepare, migrations, tests ]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy
        run: echo "üöÄ Deploying..."
