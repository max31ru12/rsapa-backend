on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:

  setup-docker:
    uses: ./.github/workflows/setup-docker.yml

  setup-envs:
    uses: ./.github/workflows/setup-envs.yml

  prepare:
    runs-on: ubuntu-latest
    needs: setup-envs
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-python@v2
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          sudo curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          poetry install --with dev

      - name: Lint with ruff
        run: |
           poetry run ruff check .

  migrations:
    runs-on: ubuntu-latest
    needs: setup-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set envs
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "ALGORITHM=${{ secrets.ALGORITHM }}" >> .env

          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> .env
          echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env
          echo "MAIL_SERVER=${{ secrets.MAIL_SERVER }}" >> .env

          echo "STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}" >> .env
          echo "STRIPE_EVENTS=checkout.session.completed,payment_intent.succeeded,invoice.payment_succeeded,invoice.payment_failed,payment_intent.payment_failed,customer.subscription.updated,customer.subscription.deleted,invoice.paid" >> .env
          echo "STRIPE_WEBHOOK_SECRET_KEY=${{ secrets.STRIPE_WEBHOOK_SECRET_KEY }}" >> .env

          echo "BACKEND_DOMAIN=rsapa_backend"
          echo "BACKEND_PORT=8000"

          echo "DB_PORT=5432" >> .env
          echo "DB_PASSWORD=test" >> .env
          echo "DB_USER=test" >> .env
          echo "DB_NAME=test" >> .env
          echo "DB_HOST=localhost" >> .env

      - name: Run docker compose
        run: |
          docker compose -f local.yml up -d rsapa_database stripe-listen

      - name: Show Postgres logs
        run: |
          docker logs $(docker ps -q -f ancestor=postgres:alpine)

      - name: Wait for postgres
        run: |
          for i in {1..10}; do
            if docker exec $(docker ps -q -f ancestor=postgres:alpine) pg_isready -U test; then
              echo "PostgreSQL is ready"
              exit 0
            fi
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
          echo "PostgreSQL failed to start"
          exit 1

      - name: Install dependencies
        run: |
          sudo curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          poetry install --with dev

      - name: Run migrations
        run: |
          poetry run alembic upgrade head

  tests:
    runs-on: ubuntu-latest
    needs: setup-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set envs
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "ALGORITHM=${{ secrets.ALGORITHM }}" >> .env

          echo "STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}" >> .env
          echo "STRIPE_EVENTS=checkout.session.completed,payment_intent.succeeded,invoice.payment_succeeded,invoice.payment_failed,payment_intent.payment_failed,customer.subscription.updated,customer.subscription.deleted,invoice.paid" >> .env
          echo "STRIPE_WEBHOOK_SECRET_KEY=${{ secrets.STRIPE_WEBHOOK_SECRET_KEY }}" >> .env

          echo "BACKEND_DOMAIN=rsapa_backend"
          echo "BACKEND_PORT=8000"

          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> .env
          echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env
          echo "MAIL_SERVER=${{ secrets.MAIL_SERVER }}" >> .env

          echo "DB_PORT=5432" >> .env
          echo "DB_PASSWORD=test" >> .env
          echo "DB_USER=test" >> .env
          echo "DB_NAME=test" >> .env
          echo "DB_HOST=localhost" >> .env

      - name: Run docker compose
        run: |
          docker compose -f local.yml up -d rsapa_database

          for i in {1..10}; do
            if docker exec $(docker ps -q -f ancestor=postgres:alpine) pg_isready -U test; then
              echo "PostgreSQL is ready"
              exit 0
            fi
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
          echo "PostgreSQL failed to start"
          exit 1

          docker compose -f local.yml run --rm rsapa_backend poetry run alembic upgrade head -d

      - name: Install dependencies
        run: |
          sudo curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          poetry install --with dev
          mkdir media

      - name: Run tests
        run: |
          poetry run pytest
