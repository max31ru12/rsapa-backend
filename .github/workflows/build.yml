name: CI

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

# --- Общие якоря (DRY) ---
x-poetry-install: &poetry_install
  - name: Install Poetry
    run: |
      python3 -m pip install --upgrade pip
      python3 -m pip install --upgrade pipx
      pipx ensurepath
      pipx install poetry
      echo "$HOME/.local/bin" >> $GITHUB_PATH
  - name: Install dependencies
    run: |
      poetry --version
      poetry install --with dev

x-write-dotenv: &write_dotenv
  - name: Write .env
    shell: bash
    run: |
      cat > .env <<'EOF'
      SECRET_KEY=${{ secrets.SECRET_KEY }}
      ALGORITHM=${{ secrets.ALGORITHM }}

      MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
      MAIL_FROM=${{ secrets.MAIL_FROM }}
      MAIL_PORT=${{ secrets.MAIL_PORT }}
      MAIL_SERVER=${{ secrets.MAIL_SERVER }}

      STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}
      STRIPE_EVENTS=checkout.session.completed,payment_intent.succeeded,invoice.payment_succeeded,invoice.payment_failed,payment_intent.payment_failed,customer.subscription.updated,customer.subscription.deleted,invoice.paid
      STRIPE_WEBHOOK_SECRET_KEY=${{ secrets.STRIPE_WEBHOOK_SECRET_KEY }}

      BACKEND_DOMAIN=rsapa_backend
      BACKEND_PORT=8000

      DB_PORT=5432
      DB_PASSWORD=test
      DB_USER=test
      DB_NAME=test
      DB_HOST=localhost
      EOF
      echo ".env written:"
      sed 's/^\(.*PASSWORD=.*\)$/\1 (hidden)/; s/^\(SECRET_KEY=.*\)$/\1 (hidden)/' .env

x-wait-postgres: &wait_postgres
  - name: Wait for Postgres
    shell: bash
    run: |
      for i in {1..12}; do
        if docker compose -f local.yml exec -T rsapa_database pg_isready -U test; then
          echo "PostgreSQL is ready"
          exit 0
        fi
        echo "Waiting for PostgreSQL..."
        sleep 5
      done
      echo "PostgreSQL failed to start"
      docker compose -f local.yml logs rsapa_database || true
      exit 1

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - <<: *poetry_install
      - name: Lint with ruff
        run: poetry run ruff check .

  migrations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - <<: *write_dotenv

      - name: Start DB (and optional stripe-listen) via docker compose
        run: |
          docker compose -f local.yml up -d rsapa_database stripe-listen
          docker compose -f local.yml ps
          docker compose -f local.yml logs --no-color --tail=50 rsapa_database || true

      - <<: *wait_postgres

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - <<: *poetry_install

      - name: Run Alembic migrations
        run: poetry run alembic upgrade head

  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - <<: *write_dotenv

      - name: Start DB via docker compose
        run: |
          docker compose -f local.yml up -d rsapa_database
          docker compose -f local.yml ps
          docker compose -f local.yml logs --no-color --tail=50 rsapa_database || true

      - <<: *wait_postgres

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - <<: *poetry_install

      - name: Prepare test artifacts
        run: mkdir -p media

      - name: Run Alembic (ensure schema up)
        run: poetry run alembic upgrade head

      - name: Run tests
        run: poetry run pytest
