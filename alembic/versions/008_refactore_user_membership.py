"""Refactore user membership

Revision ID: 008
Revises: 007
Create Date: 2025-09-03 19:11:47.184751

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "008"
down_revision: Union[str, None] = "007"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("users_memberships", sa.Column("stripe_customer_id", sa.String(), nullable=True))
    op.add_column("users_memberships", sa.Column("current_period_end", sa.DateTime(timezone=True), nullable=True))
    op.add_column("users_memberships", sa.Column("has_access", sa.Boolean(), nullable=False))
    op.add_column("users_memberships", sa.Column("_deleted", sa.Boolean(), nullable=False))
    op.create_unique_constraint(
        op.f("uq_users_memberships_stripe_customer_id"), "users_memberships", ["stripe_customer_id"]
    )
    op.drop_column("users_memberships", "end_date")
    op.drop_column("users_memberships", "start_date")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users_memberships",
        sa.Column("start_date", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    )
    op.add_column(
        "users_memberships",
        sa.Column("end_date", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    )
    op.drop_constraint(op.f("uq_users_memberships_stripe_customer_id"), "users_memberships", type_="unique")
    op.drop_column("users_memberships", "_deleted")
    op.drop_column("users_memberships", "has_access")
    op.drop_column("users_memberships", "current_period_end")
    op.drop_column("users_memberships", "stripe_customer_id")
    # ### end Alembic commands ###
