"""subscription tables

Revision ID: 006
Revises: 005
Create Date: 2025-06-22 11:59:12.111673

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "006"
down_revision: Union[str, None] = "005"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    subscription_types_table = op.create_table(
        "subscription_types",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("type", sa.Enum("TRAINEE", "ADJUNCT", name="SubscriptionType", native_enum=False), nullable=False),
        sa.Column("price_usd", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("duration", sa.Integer(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_subscription_types")),
    )

    op.bulk_insert(
        subscription_types_table,
        [
            {
                "name": "Trainee Basic",
                "type": "TRAINEE",
                "price_usd": 10.00,
                "duration": 30,
                "description": "Monthly basic trainee plan",
            },
            {
                "name": "Trainee Standard",
                "type": "TRAINEE",
                "price_usd": 25.00,
                "duration": 90,
                "description": "Quarterly trainee plan",
            },
            {
                "name": "Trainee Premium",
                "type": "TRAINEE",
                "price_usd": 90.00,
                "duration": 365,
                "description": "Annual trainee plan",
            },
            {
                "name": "Adjunct Basic",
                "type": "ADJUNCT",
                "price_usd": 10.00,
                "duration": 30,
                "description": "Monthly basic adjunct plan",
            },
            {
                "name": "Adjunct Standard",
                "type": "ADJUNCT",
                "price_usd": 25.00,
                "duration": 90,
                "description": "Quarterly adjunct plan",
            },
            {
                "name": "Adjunct Premium",
                "type": "ADJUNCT",
                "price_usd": 90.00,
                "duration": 365,
                "description": "Annual adjunct plan",
            },
        ],
    )

    op.create_table(
        "user_subscriptions",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("subscription_type_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["subscription_type_id"],
            ["subscription_types.id"],
            name=op.f("fk_user_subscriptions_subscription_type_id_subscription_types"),
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name=op.f("fk_user_subscriptions_user_id_users")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_subscriptions")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_subscriptions")
    op.drop_table("subscription_types")
    sa.Enum(name="SubscriptionType").drop(op.get_bind())
    # ### end Alembic commands ###
