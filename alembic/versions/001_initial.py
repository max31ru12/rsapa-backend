"""initial

Revision ID: 001
Revises:
Create Date: 2025-08-15 23:09:40.114876

"""

from typing import Sequence, Union

import sqlalchemy as sa
from passlib.handlers.bcrypt import bcrypt
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
from app.core.config import DEV_MODE

revision: str = "001"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "contact_messages",
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("email", sa.String(length=256), nullable=False),
        sa.Column("subject", sa.String(length=256), nullable=False),
        sa.Column("message", sa.String(length=256), nullable=False),
        sa.Column("answered", sa.Boolean(), server_default=sa.text("false"), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_contact_messages")),
    )
    membership_types_table = op.create_table(
        "membership_types",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "type",
            sa.Enum("ACTIVE", "TRAINEE", "AFFILIATE", "HONORARY", "PATHWAY", name="membership_type_enum"),
            nullable=False,
        ),
        sa.Column("price_usd", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("duration", sa.Integer(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("is_purchasable", sa.Boolean(), server_default=sa.text("true"), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_membership_types")),
    )
    users_table = op.create_table(
        "users",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("firstname", sa.String(), nullable=False),
        sa.Column("lastname", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("phone_number", sa.String(length=20), nullable=True),
        sa.Column("stuff", sa.Boolean(), nullable=False),
        sa.Column("description", sa.String(length=512), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("pending", sa.Boolean(), server_default=sa.text("true"), nullable=True),
        sa.Column("institution", sa.String(), nullable=False),
        sa.Column("role", sa.String(), nullable=False),
        sa.Column("_password", sa.String(), nullable=False),
        sa.Column("avatar_path", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
        sa.UniqueConstraint("avatar_path", name=op.f("uq_users_avatar_path")),
        sa.UniqueConstraint("phone_number", name=op.f("uq_users_phone_number")),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_table(
        "membership_payments",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("currency", sa.String(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name=op.f("fk_membership_payments_user_id_users")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_membership_payments")),
    )
    op.create_table(
        "news",
        sa.Column("body", postgresql.JSON(astext_type=sa.Text()), nullable=False),
        sa.Column("is_published", sa.Boolean(), server_default=sa.text("true"), nullable=False),
        sa.Column("author_id", sa.Integer(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), server_default=sa.text("false"), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["author_id"], ["users.id"], name=op.f("fk_news_author_id_users")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_news")),
    )
    op.create_table(
        "users_memberships",
        sa.Column("start_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("end_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column(
            "status", sa.Enum("ACTIVE", "EXPIRED", "CANCELED", "PENDING", name="membership_type_enum"), nullable=False
        ),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name=op.f("fk_user_memberships_user_id_users")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_memberships")),
    )
    # ### end Alembic commands ###

    if DEV_MODE:
        hashed_password = bcrypt.hash("admin")
        op.bulk_insert(
            users_table,
            [
                {
                    "firstname": "Admin",
                    "lastname": "User",
                    "email": "admin@mail.com",
                    "stuff": True,
                    "description": "Development superuser",
                    "institution": "Dev Institution",
                    "role": "admin",
                    "_password": hashed_password,
                    "pending": False,
                }
            ],
        )

    op.bulk_insert(
        membership_types_table,
        [
            {
                "name": "Active Member",
                "type": "ACTIVE",
                "price_usd": 20.00,
                "duration": 365,
                "description": "Any legally qualified Russian-speaking specialist (MD, DO, MBBS, PhD, or equivalent degree). practicing pathology in the united states",
                "is_purchasable": True,
            },
            {
                "name": "Trainee Member",
                "type": "TRAINEE",
                "price_usd": 20.00,
                "duration": 365,
                "description": "Russian-speaking residents or fellows in pathology or related disciplines in the United States.",
                "is_purchasable": True,
            },
            {
                "name": "Affiliate Member",
                "type": "AFFILIATE",
                "price_usd": 20.00,
                "duration": 365,
                "description": "Russian-speaking pathologists, scientists, researchers, or allied professionals interested in the field of pathology whose involvement is relevant and contributes meaningfully to the Society (non-voting).",
                "is_purchasable": True,
            },
            {
                "name": "Honorary Member",
                "type": "HONORARY",
                "price_usd": 20.00,
                "duration": 365,
                "description": "Individuals recognized fo exceptional service to the field of pathology or the Society (non-voting).",
                "is_purchasable": False,
            },
            {
                "name": "Pathway Member",
                "type": "PATHWAY",
                "price_usd": 20.00,
                "duration": 365,
                "description": "Russian-speaking individuals pursuing or transition into a medical career in the United States. This includes medical students and internationally trained medical graduates seeking mentorship and professional development as they prepare for pathology practice in the United States (non-voting).",
                "is_purchasable": True,
            },
        ],
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("users_memberships")
    op.drop_table("news")
    op.drop_table("membership_payments")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_table("membership_types")
    op.drop_table("contact_messages")
    # ### end Alembic commands ###

    if op.get_bind().dialect.name == "postgresql":
        enum_type = postgresql.ENUM(name="membership_type_enum")
        enum_type.drop(op.get_bind(), checkfirst=True)
