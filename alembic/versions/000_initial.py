"""initial

Revision ID: 000
Revises:
Create Date: 2025-06-22 22:01:00.707585

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op
from app.domains.auth.models import SubscriptionTypeEnum

# revision identifiers, used by Alembic.
revision: str = "000"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    #
    # subscription_type_enum = postgresql.ENUM(SubscriptionTypeEnum, name="subscription_type_enum")
    # subscription_type_enum.create(op.get_bind(), checkfirst=True)

    subscription_type_table = op.create_table(
        "subscription_types",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("type", sa.Enum(SubscriptionTypeEnum, name="subscription_type_enum"), nullable=False),
        sa.Column("price_usd", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("duration", sa.Integer(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_subscription_types")),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("firstname", sa.String(), nullable=False),
        sa.Column("lastname", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("stuff", sa.Boolean(), nullable=False),
        sa.Column("description", sa.String(length=512), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("pending", sa.Boolean(), server_default=sa.text("true"), nullable=True),
        sa.Column("institution", sa.String(), nullable=False),
        sa.Column("role", sa.String(), nullable=False),
        sa.Column("_password", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
        sa.UniqueConstraint("email", name=op.f("uq_users_email")),
    )
    op.create_table(
        "user_subscriptions",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("subscription_type_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["subscription_type_id"],
            ["subscription_types.id"],
            name=op.f("fk_user_subscriptions_subscription_type_id_subscription_types"),
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name=op.f("fk_user_subscriptions_user_id_users")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_subscriptions")),
    )

    op.bulk_insert(
        subscription_type_table,
        [
            {
                "name": "Trainee Basic",
                "type": "TRAINEE",
                "price_usd": 10.00,
                "duration": 30,
                "description": "Monthly basic trainee plan",
            },
            {
                "name": "Trainee Standard",
                "type": "TRAINEE",
                "price_usd": 25.00,
                "duration": 90,
                "description": "Quarterly trainee plan",
            },
            {
                "name": "Trainee Premium",
                "type": "TRAINEE",
                "price_usd": 90.00,
                "duration": 365,
                "description": "Annual trainee plan",
            },
            {
                "name": "Adjunct Basic",
                "type": "ADJUNCT",
                "price_usd": 10.00,
                "duration": 30,
                "description": "Monthly basic adjunct plan",
            },
            {
                "name": "Adjunct Standard",
                "type": "ADJUNCT",
                "price_usd": 25.00,
                "duration": 90,
                "description": "Quarterly adjunct plan",
            },
            {
                "name": "Adjunct Premium",
                "type": "ADJUNCT",
                "price_usd": 90.00,
                "duration": 365,
                "description": "Annual adjunct plan",
            },
        ],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # subscription_type_enum = postgresql.ENUM(SubscriptionTypeEnum, name="subscription_type_enum")
    # subscription_type_enum.drop(op.get_bind())
    op.drop_table("user_subscriptions")
    op.drop_table("users")
    op.drop_table("subscription_types")
    # ### end Alembic commands ###
